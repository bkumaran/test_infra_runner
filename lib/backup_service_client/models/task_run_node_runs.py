# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TaskRunNodeRuns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'str',
        'status': 'str',
        'start': 'str',
        'end': 'str',
        'error': 'str',
        'error_code': 'int',
        'progress': 'float',
        'stats': 'Stats',
        'out': 'str'
    }

    attribute_map = {
        'node_id': 'node_id',
        'status': 'status',
        'start': 'start',
        'end': 'end',
        'error': 'error',
        'error_code': 'error_code',
        'progress': 'progress',
        'stats': 'stats',
        'out': 'out'
    }

    def __init__(self, node_id=None, status=None, start=None, end=None, error=None, error_code=None, progress=None, stats=None, out=None):  # noqa: E501
        """TaskRunNodeRuns - a model defined in Swagger"""  # noqa: E501
        self._node_id = None
        self._status = None
        self._start = None
        self._end = None
        self._error = None
        self._error_code = None
        self._progress = None
        self._stats = None
        self._out = None
        self.discriminator = None
        if node_id is not None:
            self.node_id = node_id
        if status is not None:
            self.status = status
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if error is not None:
            self.error = error
        if error_code is not None:
            self.error_code = error_code
        if progress is not None:
            self.progress = progress
        if stats is not None:
            self.stats = stats
        if out is not None:
            self.out = out

    @property
    def backup(self):
        return self.stats.backup if self.stats else None

    @property
    def node_id(self):
        """Gets the node_id of this TaskRunNodeRuns.  # noqa: E501

        The node that runs the task  # noqa: E501

        :return: The node_id of this TaskRunNodeRuns.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TaskRunNodeRuns.

        The node that runs the task  # noqa: E501

        :param node_id: The node_id of this TaskRunNodeRuns.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def status(self):
        """Gets the status of this TaskRunNodeRuns.  # noqa: E501


        :return: The status of this TaskRunNodeRuns.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskRunNodeRuns.


        :param status: The status of this TaskRunNodeRuns.  # noqa: E501
        :type: str
        """
        allowed_values = ["unknown", "failed", "done", "running", "waiting", "skipped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def start(self):
        """Gets the start of this TaskRunNodeRuns.  # noqa: E501

        The start time for the task.  # noqa: E501

        :return: The start of this TaskRunNodeRuns.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TaskRunNodeRuns.

        The start time for the task.  # noqa: E501

        :param start: The start of this TaskRunNodeRuns.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this TaskRunNodeRuns.  # noqa: E501

        The end time for the task  # noqa: E501

        :return: The end of this TaskRunNodeRuns.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this TaskRunNodeRuns.

        The end time for the task  # noqa: E501

        :param end: The end of this TaskRunNodeRuns.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def error(self):
        """Gets the error of this TaskRunNodeRuns.  # noqa: E501

        Any errors that occur during the run will be displayed here.  # noqa: E501

        :return: The error of this TaskRunNodeRuns.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TaskRunNodeRuns.

        Any errors that occur during the run will be displayed here.  # noqa: E501

        :param error: The error of this TaskRunNodeRuns.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_code(self):
        """Gets the error_code of this TaskRunNodeRuns.  # noqa: E501

        If there is an error there will be a non-zero error code  # noqa: E501

        :return: The error_code of this TaskRunNodeRuns.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this TaskRunNodeRuns.

        If there is an error there will be a non-zero error code  # noqa: E501

        :param error_code: The error_code of this TaskRunNodeRuns.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def progress(self):
        """Gets the progress of this TaskRunNodeRuns.  # noqa: E501

        The task progress  # noqa: E501

        :return: The progress of this TaskRunNodeRuns.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TaskRunNodeRuns.

        The task progress  # noqa: E501

        :param progress: The progress of this TaskRunNodeRuns.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def stats(self):
        """Gets the stats of this TaskRunNodeRuns.  # noqa: E501


        :return: The stats of this TaskRunNodeRuns.  # noqa: E501
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this TaskRunNodeRuns.


        :param stats: The stats of this TaskRunNodeRuns.  # noqa: E501
        :type: Stats
        """

        self._stats = stats

    @property
    def out(self):
        """Gets the out of this TaskRunNodeRuns.  # noqa: E501

        The task output  # noqa: E501

        :return: The out of this TaskRunNodeRuns.  # noqa: E501
        :rtype: str
        """
        return self._out

    @out.setter
    def out(self, out):
        """Sets the out of this TaskRunNodeRuns.

        The task output  # noqa: E501

        :param out: The out of this TaskRunNodeRuns.  # noqa: E501
        :type: str
        """

        self._out = out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskRunNodeRuns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskRunNodeRuns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
